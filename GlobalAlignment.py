import sys
sys.setrecursionlimit(1500)
def LCS( string1, string2, sM):
    n = len(string1)
    m = len(string2)
    s = [[0 for x in range(m+1)] for y in range(n+1)]
    backTrack = [["x" for x in range(m+1)] for y in range(n+1)]
    for i in range(m+1):
        s[0][i] = (i * -5)
        backTrack[0][i] = 'r'
    for i in range(n+1):
        s[i][0] = (i * -5)
        backTrack[i][0] = 'd'
    for i in range(1,n+1):
        for j in range(1,m+1):
            match = 0
            if string1[i-1] == string2[j-1]:
                match = 1
            matchScore = int(scoreGetter(sM,string1[i-1],string2[j-1]))
            scores = [ s[i-1][j]-5, s[i][j-1]-5, s[i-1][j-1] + matchScore ]
            s[i][j] = max(scores)
            if s[i][j] == s[i-1][j]-5:
                backTrack[i][j] = "d"
            elif s[i][j] == s[i][j-1]-5:
                backTrack[i][j] = "r"
            elif s[i][j] == s[i-1][j-1] + matchScore:
                backTrack[i][j] = "c"
    for row in s:
        print row
    print "____________________"
    for row in backTrack:
        print row
    print s[len(string1)][len(string2)]
    i = len(string1)
    j = len(string2)
    outString1 = ""
    outString2 = ""
    while i > 0 or j > 0:
        #print (i,j)
        if backTrack[i][j] == 'c':
            outString1 = string1[i-1] + outString1
            outString2 = string2[j-1] + outString2
            i = i-1
            j = j-1
        elif backTrack[i][j] == 'd':
            outString1 = string1[i-1] + outString1
            outString2 = "-" + outString2
            i = i-1
        elif backTrack[i][j] == 'r':
            outString1 = "-" + outString1
            outString2 = string2[j-1] + outString2
            j = j - 1
    print outString1
    print outString2
    
def charToIndex( char ):
    if char == 'A':
        return 0 
    if char == 'C':
        return 1
    if char == 'D':
        return 2
    if char == 'E':
        return 3 
    if char == 'F':
        return 4 
    if char == 'G':
        return 5 
    if char == 'H':
        return 6
    if char == 'I':
        return 7 
    if char == 'K':
        return 8 
    if char == 'L':
        return 9 
    if char == 'M':
        return 10 
    if char == 'N':
        return 11
    if char == 'P':
        return 12 
    if char == 'Q':
        return 13 
    if char == 'R':
        return 14 
    if char == 'S':
        return 15 
    if char == 'T':
        return 16 
    if char == 'V':
        return 17 
    if char == 'W':
        return 18 
    if char == 'Y':
        return 19  

def scoreGetter( scoreMatrix, char1, char2):
    char1Index = charToIndex(char1)
    print char1
    print char1Index
    char2Index = charToIndex(char2)
    return scoreMatrix[char1Index][char2Index]

def readLCS( backTrack, v, i, j):
    if i == 0 or j == 0:
        return
    if backTrack[i][j] == "d":
        readLCS( backTrack, v, i-1, j)
    elif backTrack[i][j] == "r":
        readLCS( backTrack, v, i, j-1)
    else:
        readLCS( backTrack, v, i-1, j-1)
        sys.stdout.write(v[i-1])
        
string1 = "AHCFSLCQTNYTNAKTHKEDPVQAKSSQDTVQWCFCIFQFLDHRSNLHPDTELMWCCFVHQGCGEYFWKPPIPFSQGNEDKRLFKTCITKNISSGMLVGVTMIRYVVYIKRENMAKGWKTTIDCPSQIEGVEGTDNQHWNGEETQWAFWTNGGRPKSTNEPYSVPCLVYGYVAEWFHNHERMRNYDTNVKCKRQKYLKGCCATPCINWDRDIACNSIRLRFQHPNMSLSKCNKRLWAQGTAGGQKYKSYGNSSFTSRALWTEELFLQDDIRYFKCMFPKTQFKQCSFRGCNRIKYFKRDLGPQLIIIHAELVEYIEARYGGMAGGGLQGIRFNQDCQPWSCFFALNFYQWHIEGVTVQKMNNRTKDQDWQMGSEEFGMNTCIQEQRDEHTENYCKTLYWEAHSHHMASMAICEACRKNNKMYMLPRYWCCKWPAAPWGLNPRTQMWSVANWRVPEWVHNQYQPDSTTVACALGAPDLAAGFLQVICDIDCYHVFIHDHDWLNWKFNDACLFYFHNRVRMMWDECGFYPFQDHKNWAAWDIWHLMFRIVFIRCWDIKDTIMAEWPFQMSSHWQKLFECLMPPRPWWWLTPSAIKWQCPDSAVMDHIFCSPEATRTRRCDAMFLLDRVVPDKEHAHDWLFSIGIDACPYMLFTHALCTTNNRLGKDAQMATNNWQQHHNCWGNRMSWGMPGYQLGKPFCCARGFESRWLIHWEHVPQTTCECYTAFMLDAWPTVSSTGNRTLIRKTVNVPDKYILQPRLWSSEDGPLRWFKEIDRAAHIHEMQWLSIRGFRTTYMALVTIKNATHHYKVDCCMILTDYKEPLMWCWNGRWFCEPEETLSPAYPFYLLPGCILGEPGWMKLATMGTEVSQWYEIGSLGNGNCPVMVGGIWDDMFYMEKYLLYPYCFSRLIHYNQTMVRFNMAESPWSKLVVYCVAGWLPCSSTWLFWLALLIVLDHSDSFRGMYFCKQCTVNNWHYMIWMWGPVDRNFKWPRMDHVWNCDNPRTLEMESPDLYTNCPHIWPWGTKLNPTDSHPGGYLSIIYSGHIWEVRYCKWIDHHMCHSMDMDDRCQIIGDANVECLRFTWKTTYVLTEFKDDKSMSSALYEQDVYMQMHFATQEEKTYIDINDSCDVDVKYPFERGNKESEDHIACRETSNPFCKWPSGIGGMTETIWESDNSHCNYPMYCRPSDYVYELVFIFRCINDEYWSNIFWPLSAIIGVCDVDGAPIIWDFQNFLTYIDDFDAYTMLHIDRTLINMVREGMSKSFFFQYHEPIIALKKQSMRSSTPLLCDWSIPCCKKRAYFEIKAWVGKSTEEPTFIFKIQEYTINWHCAVNNWMAFPWWGNNSRPVCWGYECSMKVTCGPFSHSNQNPVAIYDNDETRDQILWIWCMDEKSPLMGLPQQGRTSCAWFQHTDLTDIAKWDADRVVGSYKNFDFMKYTYTQHPAHEMTDKDLVIMVNGMGLLLHMERSADVWKAWCKLSNLCTECHWHFADQEFKTYCAVIGTGQHWHQVLMDWPPEHYVIAAKYQLKKRQKHACVFIGYIHALRIAPHLAKTETNKAKSGDAPDRGGVLTNQRIMYHCWKYMEPANGVGLMNEHTCDCRYSIQTVFRDTDGVNGVKDGDSPYAGLYQTRKCATGYQIEVVYREKSQEENRRVIRYHTADVRRFITNINKAIRGGTADWKYKQDPVQRHSGPMCHKGKPIQVADFPGIDPGQVDMMMKVQWVYKSFFWDQQDNQSNWVRWKFKMKRQRQESGKWGSSHQTEATHQDDHPVTVGCGDQRLTKKHCKVWLWPRSNVTDVVAKQHLDNHCNVTVEHHINTHSVMSTGHPEGAKEHMSCEQAMMWVEVYEVAHKAQYECYKCRSIYNDWNSKMYYEVMTHCIHTRCWWQYYEGPCDNWLHIVHWNMHAEFIQELFAYVYWRPGAMFNCTGRDPYMRYADVCIGGCCEPEAIHCMMPECPKSEDMDRAPYARNIVSASTRRYDLCDSYAEKCCFFVHDSTPLLMFTEDQALVMMCFAQSDNDLAMKFLMLWEDHMWPNAIDKSQGWVKDFFISIALVKSIDWSAIVVDEFIFTETCTEHIIVSFTEVSVMTQNQCMGQHLMEYNCWLPHKFFGVAVNYMRGSCMCKKSLFDSVRFMKEYNQKAGRTTKGTTPEVMMDSCNIAKSNLMGDGACGIETYKMCVHIEWYPNYEAHHYQFRAQMRTDQCFNNLLSMWEWEQCSMWKWRIFDRTSMLCRKVHCYKKNELWTPGKSCELYTNLADMGQMTCSAYEEFWTNNRTTEGMSCDGQHSSSDEYAMIGLQLFNVNAQAEEDSPIMAEFQGGWIRYPHKQYVECEPTRQWWPTTGCYLLENWCTLETLNNIEDCSYDNFNMQDAFPCEFANDFFSFCRHAWPTTEEDHGRTTGRCMTVGCDWWAASMNPTDQKVLYQMGWMFFAHFFVGTMMEYHQPQWPYLQYMPLLMYYPHAPAPFPSTINQGEPMCMPHHTNQEYLEGYTMGETEFDKASFQMTIKLGANDVQVHRVYDFPRWNTSPRFNWSLISMFIFMRFKGVDWDDSFAGHSPGNQVPNQVDRTMPMLLFEQTNFSKSSIANCGPQTHNWQHCVPDRRTDAVSQYRHKFCRHLKGNNRPWKRQYIVHPYKNWDDNTPDMWDTIRAFVCRWSHDRMYPACDTYVTWAEKTKTIENDHAFFYNGYTQDFMRILWPQLAVSPPKRKENPPQDTATCTTMQTMHATSFDHHANQEVTTMPSSKHGQAQVCPWVWPSCGAFNNWMSYTGACTTVQPHLYGRSLNKLCPTLLNFKLSRGPFHIWEWMSVRLVCMLRCDMLEFPRSHCYCVLEKEVKRDPSCQGKFDSTKYPQYHWTAAFWHCEWRSRRCDQKNPSTWIVVRQRECPKAILNWYKKMWRARSPWRCYWDTWNFWWMKWVLWPAMVTRGQWYAMDNHIVYMLNADFCVGGFSGYYFLRKLGLEMLNMAAVALYAFNSLRSDWNHHYHYWSTPWKAQIGGRGGTKNSRLSTTANPIYPCDEYVGHCVRFSSKVRNLFPYVSVAASPLATRWNPKFSMEFWHKRYMPTVWCNALRAEQKWGWWVGHAMVPNGNHPGLLYVPIHFTMLNAAIYHLCRGNKYQPAPNQWNEPHEMSAATKQMDSCIFWLMRGDINLTEDCTNPQWTGMDICHNMTIIPQKPLRLRNNIPLWEWYTDQNWGYAERNVAKPQFECRIGNFAAFKTADHIPKEWCHIAAEASRDFILEQYDYATHEYWCPWWPLSYEKGKSFINSNPGHMVDERNFNCFKLPWMHTMDEEVKPLCVRTCVWVTAYAIWNRLKAHNRYFSTCNKLGWYPCTDEWICDWIPKLIFMNKHLVYKRARTNKNEQWMWFSTFFNRNQKAFYWSANARTMDVNSFTIGTRTVCPMVSEGEFHAWALQAEEFPAASLGQDLIWCQDHMVTAVALIMMCIPSFCWELLDKMNCAMQDNKGQESMIFHMVHSMERIAFDMPNMALNESSCTPCMRWYTQRPCYTDEYTTSQQTRMWNEWFYFCQLCEIHEPPAMRKHNTFPDCVLVVWRVRQAMGSGGLQVGNPKKPISIYVWMNPGAEICEWFFLAMCTSKMLPHNQDAYFRFARTHPHEQICTNKSVSRILPPHEVDEKASNFEVTMVHPTYSTEYQTLSCWVWQPNCSCSCDAEGAPTHKFRYKSHLATSVSYPLELTHIQANLIVCYLQKMFYMHWTCFKMRHQFRFRAHANCYCADCMMPPATNPMYDSPVALWVYRF"
string2 = "AHYFSLVLKADQTNYVNAKTHIALEDPVQEDSDKSQDTRQWCIFQFLDHRSNLHPDTMAWQGCGEYFWKPPIFFSQGNEDKRLFKTCITKVISSGMLYVVYIDHILRKMHENGWCPGVQYHGTDNQHWNGEETTWATNGGRPKSTNEPYSVPCLVAEWFHLHGVLYDTNQVIKCKRQKYLKGACATPEDNTRRFCWDRDIACNSIRLRFQHPNMSLKKCNKRLHRRAGGQKQGGFWHKHKSYSYHAVEQNDMFQSYALWTEELQVLDCLQDDIKTLFKQCSIHYVFRGCNDIKYFMPQLIIIHAMLVEYIENRYGYMDGGGLDHAANASIRFNQDCQAYITFKFTEHFDEPTSIVWQMGVLPEEEFGMNTCIWEQRDECTENYCTDADLETLYWHMASMAICWACRKLSEDIYMRSSPLWCCCLWPAAPSAVAHYDEKILNPMVHVANWRVPEPAMTEKIKKHFHGYQHCSTCVACVVLKLGAPDTSQGAAGFLQVICASTTMIWIDCYHHATEHDWLNWKFMDACLFYMWDECGTQMLLRCNWAAWDIWRGIYCQEMFRIVKIRCFDIKDTIVAEWPFQSSHWQKLFECLMPPTPSAIKWQCPGSWDSAVVDHIFCSPEMFLLDRAVPDNQGWPGEHHVINRIVWLFSCQPGIDACPYILFTHALCTTNNMASSGKDAQMQTNWGNRMSWGMPGARGFSMFIPQTTCECYTAFMLDAWPTVSQTGNRTLCRKTVNHWEQLPDKYIGFPRLWFHEDGPLPIFKHIHAMQWLSPNRYGFRTTYMALVLIQNATRAHKKVDPTYYKEPLMWCWNGRWFCRAKIVTVSPAYPFYLLPMISMCQFIQCILFEPGWMKLATMGTEVSQWYENGSLGNGNCPVMVGGIWDDMFHVKYMEKYLLYPYCFKRMVRKFINIFVRVMAESPWSKLVVYCVAGGLMCSFTWAELNCNPWGLDILLEDNFRGMYPCKQCFATDTNDRDNFLGEYFHYMHWKWGPHWYILWCPPRMDHVWNCDNPRAMEMMPQDRGYTNCWGGGYLSDIYSGHIWEVREVFGWSCEQQHMCHSQDGDSMTSMQPCLVCPAECRVCPVWGYVATEFCHWTNPQYEQDVYMQMHFEKTYIDINDSCDPDVKYPFERGNKHRNACRMLPTSNPFIPWKRSSHWPIGRGGMTETIWESHCNYPMYCSKYVYELVFIFRAINDEYWSNIIKTPTWPLSAIIGVCDVDCSWAAPIIWDFQNFLTYPDDFDALHIDRTLINMVSHEPIIALKKQSMRSSTPLLCDYSIPCCKKRAYFEEEPTFIFKIQEYTINWHCANWMAFPNWGNNSRMVCWGKECSMYEWLGVKHKQNRVAIYDNDEDQILWILIEHELKQNCMDEKSPLRGLRFMRIWFSDQGRTSIPWWIDNLNEWTDLTFHGLLWGPYSACVVGSYKNFDFMKYTYTQHPAHEACRRPFAAVNDMKAWCKLSNLCTFSGCHWHHADQEFKTYCAVIQHWHQVLMDWPPPVAHYVAAKYDTNKKRQKHACVFIGYADNERDLHKAFSCIIFYMHGAPDRNGVLTLQRKHIKLDMYHCWKYMEIANGVGLMNEHTCDCRYSIQTVCRSTKPREFANFGVNGWKRGNYPTPRDCRLIVVTGYQIDVVYREKSQEENFREIRYHTAMKRRFITNPAKAIRGKQDPVQRHSGPMCHKGKPGIDPGPWYMMNVQQMYTVMMKSPFWDQQDNQNWVMPNWVQQQESGKWGSSHNNTAQCKTEATHQDPGVFMIDMMKLTPVGGPIKAYLNRQDDCNVTHVCVHRPEGAKHMSYEQAMMWVEVEGEVAMMIDKAQYGCYKCRSIYNHDNILCGANEMSKMFYETHCIHTRCWEQVYPYFGRCHKLQELFARMCDIHCVYHRPGAMFNCTGRDPYMRYADVCIGGCCKFEAIHCMMPECPKSEDHIFTEVDARAPYARFIVSASTRRYDLCDSYAEKMCDFLMFTEDQAMRCFLMLWHMWPNAIDKQGSHSMNGSAADVKSIDWSAIVVNEFTETCSMELYRSFEELSVMTQNQCMHKFFGVAVNYMRGSCMCDEVYNCSDKSLFDSVRFYNQKASDAKGRTTGGWTPWEMMDSCNIPKSNLMFTGACTCVKCPVDLETYKYYRFMKEEYVYDEASKITMHLTHQCFFNLQSMREWEQCTSRNMWMIFCRYTKNELWTPQNHCVFFGGDISCELYMGQFTCSAYWEDHWCRWAPCDGQHSSSDEYAFIKVFKGLQLFEEDGYPHKQYHAFCEPTRQWWPLIECDQCTGHHNSNSLNDNFNMQDMFPCEFANDRIMDEFSLCREAYLPTLEEDHGRTPGCMTVGCSRHCDWWMYRDFTTTHLVKNNWIGFVGTMMEYHQPLWPYRQQYMPLLMYYPHAWNLLHQEDAPFPSIYRHINNDGEYMCMPHHTKFPMLQEYLEGTASFQMTLGDKAHKPYKLGANDVQVHRVYDFPRWKTSPRFNWSLISMFIFMFKGVDWDFSFKGHSPGNQVPNQSRQLLMDRTMANLWQVCKYWETMLTFEQNNFCGPQTHNWQHCLIVPDRRFDRSVNQRWCAVNRSSPWCRHWKRKRSRYIYRDNTPDMWDTVRASHWWVCRWSHDPKCSMYPACDTYVTWAEKTKTIENDNTPIKKQNNKFYNGYTQDAVSPPKRKETPPQDKATCTTWQTMHATNVEVTFHLERGMTQFSSKHGQAQVCLMTAMQEKWGAFNNWMSYTGACTTPQPHLYRRSLNKLDIQFECPRLLNFKLSRGCFHIWSWMTSGYHLVCMTRCDMLEFPVKRDPSCQGKFDSTKYPQYYAERIHIQPWWWHCEWRSRRCDQKNPSTQMVVRQRECPKAILNKKMWRARSPWRCYSYIWNFWLMKWVLWPAMCGESFLWTRGQWYAMKNHIVYMLNADFCVGGFHGYEMLNMAAVALYAFNSLRSDWNHHYHYWSTPWKAQIGPREFMWGPKEMFTKNSRLSTTGNPIYMSPFSSKPRDLSLMDNDFPLTRWLPKFSMENWHTVIWEYMPTVWIAMKISCNALQVPNGNHIGKLHVPIHLAMLNAAIYHLCPAPNQWNEPHEMSAATKQFWLMRGDINLTGMDICHRFTMLMTLHQWFVIKKPLRLWGNNIPWYTDQNVGYAERNVAKPQFECRIGNFLKFKVIPKERFRMYHNFILEQYDYATHEYERGCPWWPLSYEKGKVLDTDKSRPRHMVDDRNFKCFKLPWMHTADEEVKPLCVRTCVGMQLDVDLKAHFWYTCCNGNKLYQGWYPCRKLACIPLEVPMNQLCERHWGKKCFTLTLNNHLVKRTNEQWMWFSTRFNRNQHAFYWSANARTMDTNSFTIGTRTVCPAWALQAEEFPAASLGVEVYWLAYDFIWGTYVQFMWGMILVVNLMCIGSFCAMQDNKGQEHMAFHMVHEQMMERIAFDMPHHMALNESSCTPCMRWSVVLLMVFTQRPCYLDQTRMWNEWFYFCQLCEIHNARTHVERPWTGQKCQIGILFPYNKVTLYVLVVWTVRQAMGSGGLQVGNPKKRFPWQIAIYVWRNPGCEKYSCYAIFFLAIHPTPPGCTSKMLPHDSEQDSYFVVTMRSVSRIAPPHEVNRPFEVTPTYSTEYQTLSCWVCQPNCSMQCSCDAEGAPTHKFDYKSHLATYPLELTHIQAIKMFDKRQLKDHMGWTCCARHQFRFRAHANCYCADKMMPYDSPVALWVYRF"

score = []

fileName = "scoringMatrix.txt"
dataFile = open(fileName)
l1 = dataFile.readline().strip()
for line in dataFile:
    lineNew = line.strip().replace("  ",",").replace(" ",",")
    #print lineNew
    lineSplit = lineNew.strip().split(",")
    lineSplit.pop(0)
    score.append(lineSplit)

# for row in score:
#     print row

backTrack = LCS(string1,string2,score)
#print backTrack
#readLCS( backTrack, string1, len(string1), len(string2))
print "\n"